<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="8ad84b5b-fa82-490f-9eb8-a113ab692d15" name="Changes" comment="Define the main class for solving maze problems. There are instance variables to store maze structures, visited cells, and paths taken. Display() method: Display the 2D array of the maze. Use a stack to track the current position and explore adjacent cells&#10;  &#10;  After finding the destination (with a cell value of 2), print the path taken to reach the destination">
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/CA3_Question10.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/DistanceTo.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
  "lastFilter": {
    "state": "OPEN",
    "assignee": "EricHanJf"
  }
}]]></component>
  <component name="GithubPullRequestsUISettings">
    <option name="selectedUrlAndAccountId">
      <UrlAndAccount>
        <option name="accountId" value="4d32b0a4-d604-4340-b8c4-142317ffa066" />
        <option name="url" value="https://github.com/EricHanJf/ca-oop-Jianfeng-Han.git" />
      </UrlAndAccount>
    </option>
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 5
}</component>
  <component name="ProjectId" id="2cMj3rGVdVqZq21pc1vr3xVQtay" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/xhanhan/Library/CloudStorage/OneDrive-DundalkInstituteofTechnology/Year2 OO Programming/oop-ca3-Jianfeng-Han/src&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;onboarding.tips.debug.path&quot;: &quot;/Users/xhanhan/Library/CloudStorage/OneDrive-DundalkInstituteofTechnology/Year2 OO Programming/oop-ca3-Jianfeng-Han/src/main/java/org/example/Main.java&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src" />
      <recent name="$PROJECT_DIR$/src/main/java" />
    </key>
  </component>
  <component name="RunManager" selected="Application.CA3_Question9">
    <configuration name="CA3_Question1" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.CA3_Question1" />
      <module name="oop-ca3-Jianfeng-Han" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CA3_Question4" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.CA3_Question4" />
      <module name="oop-ca3-Jianfeng-Han" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CA3_Question8" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.CA3_Question8" />
      <module name="oop-ca3-Jianfeng-Han" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CA3_Question9" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.CA3_Question9" />
      <module name="oop-ca3-Jianfeng-Han" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.CA3_Question9" />
        <item itemvalue="Application.CA3_Question8" />
        <item itemvalue="Application.CA3_Question4" />
        <item itemvalue="Application.CA3_Question1" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="8ad84b5b-fa82-490f-9eb8-a113ab692d15" name="Changes" comment="" />
      <created>1707928148026</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1707928148026</updated>
      <workItem from="1707928149060" duration="173000" />
      <workItem from="1707928333863" duration="10093000" />
      <workItem from="1707946935604" duration="137000" />
      <workItem from="1707947175288" duration="2752000" />
    </task>
    <task id="LOCAL-00001" summary="Two stacks are created. Enter the number or negative number entered by the user. In the while loop, if the integer is greater than 0, it goes to the driveway stack. If it is less than 0, driveway.pop. I wrote a method called &quot;CarMoveToStreet&quot;. It can be realized that when the number is less than 0, the car will be popped out of the driveway stack, the corresponding number will be removed, and then the remaining cars will be returned from the streetway to the driveway stack.">
      <option name="closed" value="true" />
      <created>1707929495518</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1707929495518</updated>
    </task>
    <task id="LOCAL-00002" summary="Two stacks are created. Enter the number or negative number entered by the user. In the while loop, if the integer is greater than 0, it goes to the driveway stack. If it is less than 0, driveway.pop. I wrote a method called &quot;CarMoveToStreet&quot;. It can be realized that when the number is less than 0, the car will be popped out of the driveway stack, the corresponding number will be removed, and then the remaining cars will be returned from the streetway to the driveway stack.">
      <option name="closed" value="true" />
      <created>1707929657006</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1707929657006</updated>
    </task>
    <task id="LOCAL-00003" summary="I created a pair class to store coordinates in a 2D array, and the floodFillStart() method initializes a 10x10 2D array with all elements set to 0. The display() method displays the contents of a 2d array. The buildWalls() method sets some coordinates -1 as the wall. This fill() method is used to fill the region starting from the given coordinates in the 2d array. The incremental value iteratively fills adjacent pixels until more pixels cannot be filled">
      <option name="closed" value="true" />
      <created>1707931475877</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1707931475877</updated>
    </task>
    <task id="LOCAL-00004" summary="The method readFile() reads the specified file &quot;fileName&quot;, in. useDelimiter (&quot;[^ A-Za-z0-9_]+&quot;); It is a regular expression used to find symbols and words that match this expression. Created a TreeMap named identifierMap, where keys are tokens (identifiers) and values are sets of line numbers where each token appears. Then, a while loop is used to find the identifier. If it meets the requirements of the expression, it is stored as a key in Map&lt;String&gt;, and each line is stored in set&lt;Integer&gt;. Use enhanced for to traverse the content in the Map and print it out">
      <option name="closed" value="true" />
      <created>1707932500892</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1707932500892</updated>
    </task>
    <task id="LOCAL-00005" summary="Created an ArrayDeque call stack to track open tags encountered in files. Each tag should be compared to the last start tag encountered in the file. Ensure proper nesting. If all tags are nested correctly, this method returns true; Otherwise, return false.(If could not run, please try to run code i uploaded on moodle).">
      <option name="closed" value="true" />
      <created>1707934180799</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1707934180799</updated>
    </task>
    <task id="LOCAL-00006" summary="I created two queues, TakeOff and. Landing LinkedList&#10;&#10;Firstly, there is a loop that repeatedly prompts the user to input instructions.&#10;&#10;Based on the input instruction, it calls the corresponding methods: takeoff(), landing(), Next(), or exits the program.&#10;&#10;The takeoff() method adds the flight name to the queue for TakeOff. The landing() method also adds the flight name to the queue. The Next() method is to check if there are any planes waiting to land (Landing queue). If there is, it will delete the first aircraft from the queue and print the information. If there is no aircraft to land in the landing queue, the aircraft in the takeoff queue will be checked, and the first aircraft will be removed from the queue and printed as takeoff. If there are no planes in both queues, it will print that there are no planes in both queues.">
      <option name="closed" value="true" />
      <created>1707935863558</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1707935863558</updated>
    </task>
    <task id="LOCAL-00007" summary="Firstly, I created two queues in the main method to store the quantity and price of stocks. Prompt users to purchase, sell, and exit stocks. If you choose to buy, enter the quantity and price of the purchase, and then call the buy () method. Add the quantity and price to the queue in the buy () method. The sell () method is to calculate the difference between the selling price and the buying price, and find out how much money you finally earned.">
      <option name="closed" value="true" />
      <created>1707944998104</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1707944998104</updated>
    </task>
    <task id="LOCAL-00008" summary="Question7 is similar to Question6 in that it defines a class called &quot;block&quot; that contains stock blocks with company name, quantity, and price attributes, allowing users to buy and sell stocks from different companies. Use Map to track the stocks of each company. Each company's stocks are stored in a queue. The sell() method is still used to calculate the amount of profit. And there is a lack of printing out the remaining number of stocks">
      <option name="closed" value="true" />
      <created>1707945816224</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1707945816224</updated>
    </task>
    <task id="LOCAL-00009" summary="First, create a stack to store numbers, split the input equation into tags based on spaces, and then determine whether the first character of the equation is a number. If it is a number, return true and push the number onto the stack. If it is a symbol, select number1 and number2 from the stack and perform+- */. The final result is pushed to the stack in the next push. Then print the calculation process and results.">
      <option name="closed" value="true" />
      <created>1707946800661</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1707946800661</updated>
    </task>
    <task id="LOCAL-00010" summary="First, create a stack to store numbers, split the input equation into tags based on spaces, and then determine whether the first character of the equation is a number. If it is a number, return true and push the number onto the stack. If it is a symbol, select number1 and number2 from the stack and perform+- */. The final result is pushed to the stack in the next push. Then print the calculation process and results..">
      <option name="closed" value="true" />
      <created>1707946980967</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1707946980967</updated>
    </task>
    <task id="LOCAL-00011" summary="sd">
      <option name="closed" value="true" />
      <created>1707947237399</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1707947237399</updated>
    </task>
    <task id="LOCAL-00012" summary="Define the main class for solving maze problems. There are instance variables to store maze structures, visited cells, and paths taken. Display() method: Display the 2D array of the maze. Use a stack to track the current position and explore adjacent cells&#10;  &#10;  After finding the destination (with a cell value of 2), print the path taken to reach the destination">
      <option name="closed" value="true" />
      <created>1707956470903</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1707956470903</updated>
    </task>
    <option name="localTasksCounter" value="13" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Two stacks are created. Enter the number or negative number entered by the user. In the while loop, if the integer is greater than 0, it goes to the driveway stack. If it is less than 0, driveway.pop. I wrote a method called &quot;CarMoveToStreet&quot;. It can be realized that when the number is less than 0, the car will be popped out of the driveway stack, the corresponding number will be removed, and then the remaining cars will be returned from the streetway to the driveway stack." />
    <MESSAGE value="I created a pair class to store coordinates in a 2D array, and the floodFillStart() method initializes a 10x10 2D array with all elements set to 0. The display() method displays the contents of a 2d array. The buildWalls() method sets some coordinates -1 as the wall. This fill() method is used to fill the region starting from the given coordinates in the 2d array. The incremental value iteratively fills adjacent pixels until more pixels cannot be filled" />
    <MESSAGE value="The method readFile() reads the specified file &quot;fileName&quot;, in. useDelimiter (&quot;[^ A-Za-z0-9_]+&quot;); It is a regular expression used to find symbols and words that match this expression. Created a TreeMap named identifierMap, where keys are tokens (identifiers) and values are sets of line numbers where each token appears. Then, a while loop is used to find the identifier. If it meets the requirements of the expression, it is stored as a key in Map&lt;String&gt;, and each line is stored in set&lt;Integer&gt;. Use enhanced for to traverse the content in the Map and print it out" />
    <MESSAGE value="Created an ArrayDeque call stack to track open tags encountered in files. Each tag should be compared to the last start tag encountered in the file. Ensure proper nesting. If all tags are nested correctly, this method returns true; Otherwise, return false.(If could not run, please try to run code i uploaded on moodle)." />
    <MESSAGE value="I created two queues, TakeOff and. Landing LinkedList&#10;&#10;Firstly, there is a loop that repeatedly prompts the user to input instructions.&#10;&#10;Based on the input instruction, it calls the corresponding methods: takeoff(), landing(), Next(), or exits the program.&#10;&#10;The takeoff() method adds the flight name to the queue for TakeOff. The landing() method also adds the flight name to the queue. The Next() method is to check if there are any planes waiting to land (Landing queue). If there is, it will delete the first aircraft from the queue and print the information. If there is no aircraft to land in the landing queue, the aircraft in the takeoff queue will be checked, and the first aircraft will be removed from the queue and printed as takeoff. If there are no planes in both queues, it will print that there are no planes in both queues." />
    <MESSAGE value="Firstly, I created two queues in the main method to store the quantity and price of stocks. Prompt users to purchase, sell, and exit stocks. If you choose to buy, enter the quantity and price of the purchase, and then call the buy () method. Add the quantity and price to the queue in the buy () method. The sell () method is to calculate the difference between the selling price and the buying price, and find out how much money you finally earned." />
    <MESSAGE value="Question7 is similar to Question6 in that it defines a class called &quot;block&quot; that contains stock blocks with company name, quantity, and price attributes, allowing users to buy and sell stocks from different companies. Use Map to track the stocks of each company. Each company's stocks are stored in a queue. The sell() method is still used to calculate the amount of profit. And there is a lack of printing out the remaining number of stocks" />
    <MESSAGE value="First, create a stack to store numbers, split the input equation into tags based on spaces, and then determine whether the first character of the equation is a number. If it is a number, return true and push the number onto the stack. If it is a symbol, select number1 and number2 from the stack and perform+- */. The final result is pushed to the stack in the next push. Then print the calculation process and results." />
    <MESSAGE value="First, create a stack to store numbers, split the input equation into tags based on spaces, and then determine whether the first character of the equation is a number. If it is a number, return true and push the number onto the stack. If it is a symbol, select number1 and number2 from the stack and perform+- */. The final result is pushed to the stack in the next push. Then print the calculation process and results.." />
    <MESSAGE value="sd" />
    <MESSAGE value="Define the main class for solving maze problems. There are instance variables to store maze structures, visited cells, and paths taken. Display() method: Display the 2D array of the maze. Use a stack to track the current position and explore adjacent cells&#10;  &#10;  After finding the destination (with a cell value of 2), print the path taken to reach the destination" />
    <option name="LAST_COMMIT_MESSAGE" value="Define the main class for solving maze problems. There are instance variables to store maze structures, visited cells, and paths taken. Display() method: Display the 2D array of the maze. Use a stack to track the current position and explore adjacent cells&#10;  &#10;  After finding the destination (with a cell value of 2), print the path taken to reach the destination" />
  </component>
</project>